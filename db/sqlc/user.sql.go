// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"time"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	err := row.Scan(&id)
	return id, err
}

const getImageAndNameOfUser = `-- name: GetImageAndNameOfUser :one
SELECT name, image FROM users 
WHERE id = $1 LIMIT 1
`

type GetImageAndNameOfUserRow struct {
	Name  string `json:"name"`
	Image string `json:"image"`
}

func (q *Queries) GetImageAndNameOfUser(ctx context.Context, id int64) (GetImageAndNameOfUserRow, error) {
	row := q.db.QueryRowContext(ctx, getImageAndNameOfUser, id)
	var i GetImageAndNameOfUserRow
	err := row.Scan(&i.Name, &i.Image)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, firebase_uid, image, email, created_at FROM users WHERE email = $1 ::text LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FirebaseUid,
		&i.Image,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, firebase_uid, image, email, created_at FROM users WHERE id = $1 ::bigint LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FirebaseUid,
		&i.Image,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserIDByUID = `-- name: GetUserIDByUID :one
SELECT id FROM users WHERE firebase_uid = $1 LIMIT 1
`

func (q *Queries) GetUserIDByUID(ctx context.Context, firebaseUid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByUID, firebaseUid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, firebase_uid, image, email, created_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FirebaseUid,
			&i.Image,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users 
(name, firebase_uid, image, email )
VALUES ($1, $2, $3, $4) 
RETURNING id, name, image, email, created_at
`

type RegisterUserParams struct {
	Name        string `json:"name"`
	FirebaseUid string `json:"firebase_uid"`
	Image       string `json:"image"`
	Email       string `json:"email"`
}

type RegisterUserRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Image     string    `json:"image"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (RegisterUserRow, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.Name,
		arg.FirebaseUid,
		arg.Image,
		arg.Email,
	)
	var i RegisterUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateNameOfUser = `-- name: UpdateNameOfUser :one
UPDATE users SET "name" = $1 
WHERE id = $2 RETURNING id, name, firebase_uid, image, email, created_at
`

type UpdateNameOfUserParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateNameOfUser(ctx context.Context, arg UpdateNameOfUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateNameOfUser, arg.Name, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FirebaseUid,
		&i.Image,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
