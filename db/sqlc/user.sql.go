// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, image, password_hash, email, created_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (name, image, password_hash, email ) VALUES ($1, $2, $3, $4) RETURNING id, name, image, password_hash, email, created_at
`

type RegisterUserParams struct {
	Name         string `json:"name"`
	Image        string `json:"image"`
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.Name,
		arg.Image,
		arg.PasswordHash,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateNameOfUser = `-- name: UpdateNameOfUser :one
UPDATE users SET "name" = $1 WHERE id = $2 RETURNING id, name, image, password_hash, email, created_at
`

type UpdateNameOfUserParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateNameOfUser(ctx context.Context, arg UpdateNameOfUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateNameOfUser, arg.Name, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
