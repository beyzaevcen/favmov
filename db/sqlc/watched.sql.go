// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: watched.sql

package db

import (
	"context"
)

const addToWatchedMovies = `-- name: AddToWatchedMovies :one
INSERT INTO watched_movie(user_id, movie_id) VALUES ($1, $2) RETURNING user_id, movie_id
`

type AddToWatchedMoviesParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) AddToWatchedMovies(ctx context.Context, arg AddToWatchedMoviesParams) (WatchedMovie, error) {
	row := q.db.QueryRowContext(ctx, addToWatchedMovies, arg.UserID, arg.MovieID)
	var i WatchedMovie
	err := row.Scan(&i.UserID, &i.MovieID)
	return i, err
}

const deleteFromWatchedMovies = `-- name: DeleteFromWatchedMovies :one
DELETE FROM watched_movie 
WHERE movie_id = $1 
AND user_id = $2 RETURNING user_id, movie_id
`

type DeleteFromWatchedMoviesParams struct {
	MovieID int64 `json:"movie_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) DeleteFromWatchedMovies(ctx context.Context, arg DeleteFromWatchedMoviesParams) (WatchedMovie, error) {
	row := q.db.QueryRowContext(ctx, deleteFromWatchedMovies, arg.MovieID, arg.UserID)
	var i WatchedMovie
	err := row.Scan(&i.UserID, &i.MovieID)
	return i, err
}

const getWatchedMovies = `-- name: GetWatchedMovies :many
SELECT movies.id, movies.title, movies.description, movies.score, movies.image, movies.release_date 
FROM watched_movie
INNER JOIN movies ON movies.id = watched_movie.movie_id
WHERE watched_movie.user_id = $1
`

func (q *Queries) GetWatchedMovies(ctx context.Context, userID int64) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getWatchedMovies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Score,
			&i.Image,
			&i.ReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
