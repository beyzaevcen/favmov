// Code generated by sqlc. DO NOT EDIT.
// source: movie.sql

package db

import (
	"context"
	"time"
)

const addMovie = `-- name: AddMovie :one
INSERT INTO movies (title, description, score, image, release_date) VALUES ($1,$2,$3,$4,$5) RETURNING id, title, description, score, image, release_date
`

type AddMovieParams struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Score       float64   `json:"score"`
	Image       string    `json:"image"`
	ReleaseDate time.Time `json:"release_date"`
}

func (q *Queries) AddMovie(ctx context.Context, arg AddMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, addMovie,
		arg.Title,
		arg.Description,
		arg.Score,
		arg.Image,
		arg.ReleaseDate,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Score,
		&i.Image,
		&i.ReleaseDate,
	)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT id, title, description, score, image, release_date FROM movies
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Score,
			&i.Image,
			&i.ReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
